import { query } from './db.js';

async function setup() {
  try {
    // Ta bort gamla tabeller om de finns //! endast för utveckling och test
    await query('DROP TABLE IF EXISTS enrollments');
    await query('DROP TABLE IF EXISTS students');
    await query('DROP TABLE IF EXISTS courses');
    
    // Skapa students-tabellen
    await query(`
      CREATE TABLE students (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        first_name VARCHAR(50),
        last_name VARCHAR(50)
      );
    `);
    
    // Skapa courses-tabellen
    await query(`
      CREATE TABLE courses (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        course_name VARCHAR(100)
      );
    `);

    // Skapa enrollments-tabellen (junction table)
    await query(`
      CREATE TABLE enrollments (
        student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
        course_id INTEGER REFERENCES courses(id) ON DELETE CASCADE,
        PRIMARY KEY (student_id, course_id)
      );
    `);

    // Lägg till testdata i students
    await query(`
      INSERT INTO students (first_name, last_name) VALUES
      ('Anna', 'Andersson'),
      ('Bertil', 'Bengtsson'),
      ('Cecilia', 'Carlsson')
    `);

    // Lägg till testdata i courses
    await query(`
      INSERT INTO courses (course_name) VALUES
      ('Matematik 101'),
      ('Programmering 101'),
      ('Databaser 101')
    `);

    // Lägg till testdata i enrollments
    await query(`
      INSERT INTO enrollments (student_id, course_id) VALUES
      (1, 1),
      (1, 2),
      (2, 1),
      (3, 2),
      (3, 3)
    `);

    console.log('Tabeller och testdata för students, courses och enrollments skapade.');
  } catch (err) {
    console.error('Fel vid setup:', err);
  }
}

setup();
